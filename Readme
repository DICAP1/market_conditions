# 📊 Forex Market Analysis & Strategy Recommendation System

A comprehensive real-time forex market analysis system that combines **Flask web application**, **Celery background tasks**, **Redis caching**, **WebSocket real-time updates**, and **machine learning** to provide automated trading strategy recommendations.

## 🏗️ Project Architecture

This project consists of multiple interconnected components:

### Core Components:
- **Flask Web Application** (`run.py`, `app/`) - Main web server with REST API and WebSocket support
- **Celery Background Tasks** (`celery_worker.py`, `celery_beat.py`) - Automated market analysis every minute
- **Redis Database** - Caching analysis results and WebSocket message queue
- **PostgreSQL Database** - User watchlists and persistent data
- **Market Analysis Engine** (`analysis/`) - ML-powered technical analysis
- **OANDA API Integration** - Real-time forex data

## 🚀 Quick Start

### Prerequisites
- Python 3.8+
- Redis Server
- PostgreSQL Database
- OANDA API Account (free demo available)

### 1. Install Dependencies
```bash
pip install -r requirements.txt
```

### 2. Setup Environment
```bash
# Set your OANDA API credentials
export OANDA_API_KEY="your_api_key_here"
export OANDA_ACCOUNT_ID="your_account_id_here"

# Set database URL
export DATABASE_URL="postgresql://username:password@localhost/market_conditions"
```

### 3. Initialize Database
```bash
# Create PostgreSQL database
createdb market_conditions

# Run migrations
flask db upgrade
```

### 4. Start Redis Server
```bash
redis-server
```

### 5. Run the Application

#### Option A: Docker (Recommended)
```bash
# Build and run with Docker
docker build -t market-conditions .
docker run -p 5000:5000 market-conditions
```

#### Option B: Manual Setup
You need to run multiple processes in separate terminals:

**Terminal 1: Flask Web Server**
```bash
python run.py
```

**Terminal 2: Celery Worker**
```bash
celery -A celery_worker.celery worker --loglevel=info
```

**Terminal 3: Celery Beat (Scheduler)**
```bash
celery -A celery_beat.celery beat --loglevel=info
```

## 📁 Project Structure

```
market_conditions/
├── app/                          # Flask application
│   ├── __init__.py              # App factory and Celery setup
│   ├── routes.py                # REST API endpoints
│   ├── models.py                # Database models
│   ├── tasks.py                 # Celery background tasks
│   ├── sockets.py               # WebSocket event handlers
│   └── config.py                # App configuration
├── analysis/                     # Market analysis engine
│   ├── market_conditions_analyser4.py  # Main analysis logic
│   ├── market_conditions_analyser3.py  # Alternative analysis
│   ├── market_conditions_analyser2.py  # Alternative analysis
│   ├── market_conditions_analyser.py   # Alternative analysis
│   └── utils.py                 # Utility functions
├── migrations/                   # Database migrations
├── run.py                       # Application entry point
├── celery_worker.py             # Celery worker configuration
├── celery_beat.py               # Celery beat scheduler
├── celeryconfig.py              # Celery configuration
├── config.py                    # Global configuration
├── requirements.txt             # Python dependencies
├── Dockerfile                   # Docker configuration
├── fly.toml                     # Fly.io deployment config
└── test_ws.html                 # WebSocket test client
```

## 🔧 How It Works

### 1. Data Collection
- **Real-time Prices**: Fetches live bid/ask prices from OANDA API for 32 major forex pairs
- **Historical Data**: Retrieves 500 candles per instrument across multiple timeframes (M15, M30, H1, D)
- **Instruments**: EUR_USD, GBP_USD, USD_JPY, AUD_USD, USD_CAD, USD_CHF, NZD_USD, EUR_GBP, EUR_JPY, GBP_JPY, and 22 more

### 2. Technical Analysis
The system calculates comprehensive technical indicators:

- **RSI (Relative Strength Index)** - Momentum oscillator
- **ADX (Average Directional Index)** - Trend strength indicator
- **MACD (Moving Average Convergence Divergence)** - Trend and momentum
- **EMA (Exponential Moving Averages)** - 20, 50, 200 period trends
- **ATR (Average True Range)** - Volatility measurement
- **Pinbar Pattern Detection** - Candlestick pattern recognition

### 3. Machine Learning
- **Feature Selection**: Automatically finds the best combination of technical indicators using grid search
- **Linear Regression Model**: Predicts future price movements
- **Model Evaluation**: Calculates R², MAE, and RMSE metrics
- **Confidence Scoring**: Evaluates strategy reliability

### 4. Signal Detection
The system identifies multiple market signals:

- **Trend Signals**: Strong/Weak trend detection via ADX
- **Momentum Signals**: Upward/Downward momentum via MACD
- **Breakout Detection**: Price breaking above resistance levels
- **Volatility Clustering**: Unusual volatility patterns
- **Spread Analysis**: Widened spread detection
- **Anomaly Detection**: Unusual market behavior

### 5. Strategy Recommendation
Based on weighted signal analysis, recommends one of:

- **📈 Buy Strategy** - Bullish market conditions
- **📉 Sell Strategy** - Bearish market conditions  
- **⏸️ Neutral Strategy** - Sideways market
- **⚠️ Caution Strategy** - High risk conditions
- **⚡ Scalping Strategy** - Short-term opportunities

### 6. Real-time Updates
- **WebSocket Broadcasting**: Live analysis updates to connected clients
- **Redis Caching**: Stores analysis results with 90-second TTL
- **REST API**: HTTP endpoints for data retrieval

## 🌐 API Endpoints

### Market Analysis
```http
GET /api/analysis?instrument=EUR_USD
```
Returns comprehensive analysis for a specific instrument including:
- Predicted price
- Technical indicators
- Market signals
- Strategy recommendations
- Confidence scores

### Watchlist Management
```http
POST /api/watchlist
Content-Type: application/json

{
  "user_id": 123,
  "instruments": ["EUR_USD", "GBP_USD"]
}
```

```http
GET /api/watchlist?user_id=123
```

## 🔌 WebSocket Events

### Client Connection
```javascript
const socket = io('http://localhost:5000');

socket.on('connect', () => {
  console.log('Connected to WebSocket');
});

socket.on('analysis_update', (data) => {
  console.log('Analysis update:', data);
  // data contains: instrument, strategy, confidence, trend, momentum, etc.
});
```

## 📊 Monitoring & Logging

- **Application Logs**: `market_analysis.log` - Detailed analysis and error logs
- **Redis Monitoring**: Check cached analysis results
- **Celery Monitoring**: Task execution status and performance
- **Database Logs**: PostgreSQL query performance

## 🚀 Deployment

### Local Development
```bash
# Start all services
./start_dev.sh  # Create this script to start all components
```

### Production Deployment
The project includes Docker and Fly.io configuration:

```bash
# Deploy to Fly.io
fly deploy

# Or use Docker
docker-compose up -d
```

## 🔧 Configuration

### Environment Variables
```bash
OANDA_API_KEY=your_api_key
OANDA_ACCOUNT_ID=your_account_id
REDIS_URL=redis://localhost:6379/0
DATABASE_URL=postgresql://user:pass@localhost/market_conditions
FLASK_SECRET_KEY=your_secret_key
```

### Analysis Settings
- **Update Frequency**: Every 1 minute (configurable in `celeryconfig.py`)
- **Data Retention**: 90 seconds in Redis cache
- **Instruments**: 32 major forex pairs
- **Timeframes**: M15, M30, H1, D

## 🧪 Testing

### WebSocket Test
Open `test_ws.html` in a browser to test real-time updates.

### API Testing
```bash
# Test analysis endpoint
curl "http://localhost:5000/api/analysis?instrument=EUR_USD"

# Test watchlist
curl -X POST http://localhost:5000/api/watchlist \
  -H "Content-Type: application/json" \
  -d '{"user_id": 1, "instruments": ["EUR_USD"]}'
```

## 📈 Performance

- **Analysis Speed**: ~2-3 seconds per instrument
- **Memory Usage**: ~200MB for full analysis
- **API Response Time**: <100ms for cached results
- **WebSocket Latency**: <50ms for real-time updates

## 🔒 Security Considerations

- **API Keys**: Store OANDA credentials in environment variables
- **Database**: Use strong passwords and SSL connections
- **Redis**: Configure authentication for production
- **CORS**: Configure allowed origins for WebSocket connections

## 🤝 Contributing

1. Fork the repository
2. Create a feature branch
3. Make your changes
4. Add tests if applicable
5. Submit a pull request

## 📄 License

This project is licensed under the MIT License.

## 🆘 Troubleshooting

### Common Issues

**Redis Connection Error**
```bash
# Start Redis server
redis-server
```

**Database Connection Error**
```bash
# Check PostgreSQL is running
sudo systemctl status postgresql

# Create database
createdb market_conditions
```

**Celery Worker Not Starting**
```bash
# Check Redis is running
redis-cli ping

# Start worker with debug
celery -A celery_worker.celery worker --loglevel=debug
```

**OANDA API Errors**
- Verify API key and account ID
- Check API rate limits
- Ensure demo account is active

For more detailed troubleshooting, check the `market_analysis.log` file.


